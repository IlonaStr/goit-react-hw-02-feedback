{"version":3,"sources":["components/FeedbackOption/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","App.js","serviceWorker.js","index.js","components/FeedbackOption/FeedbackOption.module.css"],"names":["FeedbackOptions","options","feedbackLeave","optionsArr","Object","keys","map","option","className","classes","Button","name","key","onClick","type","Statistics","good","neutral","bad","total","positiveFb","Section","title","children","Notification","message","App","state","leaveFeedback","e","target","setState","prevState","countTotalFeedback","countPositiveFbPercent","Math","round","this","onFeedbackLeave","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"kOAyBeA,EArBS,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,cAC1BC,EAAaC,OAAOC,KAAKJ,GAC/B,OACI,oCACCE,EAAWG,KAAI,SAACC,GAAD,OACZ,4BAAQC,UAAWC,IAAQC,OAAQC,KAAMJ,EAAQK,IAAKL,EAAQM,QAASX,EAAeY,KAAK,UACtFP,QCeFQ,EAtBI,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,IAAKC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WAC7C,OACI,oCACA,4BACI,sCAAYJ,GACZ,yCAAeC,GACf,qCAAWC,GACX,uCAAaC,KACZH,EAAO,GAAK,mDAAyBI,IAAzB,QCMVC,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACI,iCACI,4BAAKD,GACJC,ICIEC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAO,2BAAIA,ICgDAC,E,4MA3CdC,MAAQ,CACLX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPU,cAAgB,SAACC,GAAO,IACflB,EAAQkB,EAAEC,OAAVnB,KACP,EAAKoB,UAAS,SAACC,GAAD,sBAAmBrB,EAAOqB,EAAUrB,GAAQ,O,EAE5DsB,mBAAqB,WACnB,OAAO,EAAKN,MAAMX,KAAO,EAAKW,MAAMV,QAAU,EAAKU,MAAMT,K,EAE3DgB,uBAAyB,WACvB,OAAOC,KAAKC,MAAyB,IAAlB,EAAKT,MAAMX,KAAc,EAAKiB,uB,uDAGjD,OACE,oCACA,kBAAC,EAAD,CAASX,MAAO,8BAChB,kBAAC,EAAD,CAAiBrB,QAASoC,KAAKV,MAAOW,gBAAiBD,KAAKnC,iBAK7B,IAA9BmC,KAAKJ,qBACJ,kBAAC,EAAD,CAASX,MAAO,cAChB,kBAAC,EAAD,CACAN,KAAMqB,KAAKV,MAAMX,KACjBC,QAASoB,KAAKV,MAAMV,QACpBC,IAAKmB,KAAKV,MAAMT,IAChBC,MAAOkB,KAAKJ,mBACZb,WAAYiB,KAAKH,0BAIjB,kBAAC,EAAD,CAAcT,QAAQ,0B,GArCZc,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMhC,a,kBExI5BkC,EAAOC,QAAU,CAAC,OAAS,iC","file":"static/js/main.0dee64f4.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './FeedbackOption.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, feedbackLeave }) => {\r\n    const optionsArr = Object.keys(options);\r\n    return (\r\n        <>\r\n        {optionsArr.map((option) => (\r\n            <button className={classes.Button} name={option} key={option} onClick={feedbackLeave} type=\"button\">\r\n                {option}\r\n            </button>\r\n        ))}\r\n        </>\r\n    )\r\n}\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.shape({\r\n        good: PropTypes.number.isRequired,\r\n        neutral: PropTypes.number.isRequired,\r\n        bad: PropTypes.number.isRequired,\r\n    }).isRequired,\r\n    feedbackLeave: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positiveFb}) => {\r\n    return (\r\n        <>\r\n        <ul>\r\n            <li>Good - {good}</li>\r\n            <li>Neutral - {neutral}</li>\r\n            <li>Bad - {bad}</li>\r\n            <li>Total - {total()}</li>\r\n            {good > 0 && <li>Positive feedback - {positiveFb()}%</li>}\r\n        </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.string.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positiveFb: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Statistics;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => {\r\n    return (\r\n        <section>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </section>\r\n    );\r\n};\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n    return <p>{message}</p>\r\n};\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;","import React, { Component } from 'react';\nimport './App.css';\n\nimport FeedbackOptions from './components/FeedbackOption/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport Section from './components/Section/Section';\nimport Notification from './components/Notification/Notification';\n\nclass App extends Component {\n state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  leaveFeedback = (e) => {\n    const {name} = e.target;\n    this.setState((prevState) => ({ [name]: prevState[name] + 1 }))\n  };\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n  countPositiveFbPercent = () => {\n    return Math.round((this.state.good * 100) / this.countTotalFeedback())\n  }\n  render() {\n    return (\n      <>\n      <Section title={'Please leave your feedback'}>\n      <FeedbackOptions options={this.state} onFeedbackLeave={this.feedbackLeave}\n      /> \n      </Section>\n\n      \n      {this.countTotalFeedback() === 0 ? (\n        <Section title={'Statistics'}>\n        <Statistics\n        good={this.state.good}\n        neutral={this.state.neutral}\n        bad={this.state.bad}\n        total={this.countTotalFeedback}\n        positiveFb={this.countPositiveFbPercent}\n        />\n        </Section>\n      ) : (\n        <Notification message='No feedback left'></Notification>\n      )}\n        </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"FeedbackOption_Button__3LRly\"};"],"sourceRoot":""}